
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package sw.wine.livraison.servicestub;

import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.logging.Logger;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import sw.wine.itf.DAOException;
import sw.wine.itf.ICommandeArticles;
import sw.wine.livraison.Article;
import sw.wine.livraison.CommandeInfos;
import sw.wine.livraison.NonDisponibleException;
import sw.wine.model.Bottle;
import sw.wine.model.Commande;
import sw.wine.model.CommandeArticles;
import sw.wine.model.Wine;
import sw.wine.model.dao.JPAWineDAO;

/**
 * This class was generated by Apache CXF 2.6.2
 * 2014-03-07T15:19:07.114+01:00
 * Generated source version: 2.6.2
 * 
 */

@javax.jws.WebService(
                      serviceName = "LivraisonServiceService",
                      portName = "LivraisonServicePort",
                      targetNamespace = "http://www.univ-lyon1.fr/M2TI/TIW5/wine/service/livraisons/",
                      wsdlLocation = "wptiwe5/base-tp-tiw5/services/WebContent/livraisons.wsdl",
                      endpointInterface = "sw.wine.livraison.servicestub.LivraisonPortType")
                      
public class LivraisonPortTypeImpl implements LivraisonPortType {

	@Resource
    JPAWineDAO dao;
    
	EntityManager em;
	public LivraisonPortTypeImpl(){
		em = Persistence.createEntityManagerFactory("pg").createEntityManager();
	}

	
    private static final Logger LOG = Logger.getLogger(LivraisonPortTypeImpl.class.getName());

    /* (non-Javadoc)
     * @see fr.univ_lyon1.m2ti.tiw5.wine.service.livraisons.LivraisonPortType#commande(java.util.List<fr.univ_lyon1.m2ti.tiw5.wine.service.livraisons.VinT>  vin ,)java.lang.String  id ,)java.lang.Double  prix )*
     */
    public void commande(java.util.List<sw.wine.livraison.servicestub.VinT> vins,javax.xml.ws.Holder<java.lang.String> id,javax.xml.ws.Holder<java.lang.Double> prix) throws NonDisponibleFault    { 
//        LOG.info("Executing operation commande");
//        System.out.println(vin);
//        try {
//            java.lang.String idValue = "";
//            id.value = idValue;
//            java.lang.Double prixValue = null;
//            prix.value = prixValue;
//        } catch (java.lang.Exception ex) {
//            ex.printStackTrace();
//            throw new RuntimeException(ex);
//        }
//        //throw new NonDisponibleFault("nonDisponibleFault...");
    	
    	JPAWineDAO dao = new JPAWineDAO(em);
		EntityTransaction et=em.getTransaction();
		if (!et.isActive()) et.begin();
		System.out.println("CommandeInfos - Création de commande pour "+vins.size()+" vins");
		double prixTotal = 0;
		int nombreCmdTmp;
		int nombreDispTmp;
		double prixTmp;
		Wine w;
		
		for(int i=0;i<vins.size();i++){
			try {
				w = dao.findWineById(vins.get(i).getReferenceVin());
				nombreCmdTmp = vins.get(i).getNombre();
				System.out.println("CommandeInfos - Info du vin"+i
						+" #"+vins.get(i).getReferenceVin()
						+" : Nb commandé="+nombreCmdTmp);
				nombreDispTmp = w.getBottles().size();
				System.out.println("CommandeInfos - Info du vin"+i
						+" #"+vins.get(i).getReferenceVin()
						+" : Nb disponible="+nombreDispTmp);
				if(nombreCmdTmp>nombreDispTmp) throw new NonDisponibleFault(vins.get(i));
				prixTmp = w.getPrice();
				System.out.println("CommandeInfos - Info du vin"+i
						+" #"+vins.get(i).getReferenceVin()
						+" : Prix="+prixTmp);
				prixTotal += prixTmp * nombreCmdTmp;
				
			} catch (DAOException e) {
				System.out.println("CommandeInfos - DAOException");
				//em.close();  
				throw new NonDisponibleFault(vins.get(i));
			} catch (NullPointerException e){
				System.out.println("CommandeInfos - NullPointerException");
				//em.close();  
				throw new NonDisponibleFault(vins.get(i));
			}
		}
		try {
			Commande cmd = new Commande();
			for(int i=0;i<vins.size();i++){
				cmd.addArticle(dao.findWineById(vins.get(i).getReferenceVin()), vins.get(i).getNombre());
			}
			dao.insertOrUpdate(cmd);
			CommandeInfos newCmd = new CommandeInfos();
			newCmd.setCmdId(String.valueOf(cmd.getId()));
			newCmd.setPrix(prixTotal);//Long to String
			System.out.println("CommandeInfos - Commande créée : prix="+prixTotal);

			LOG.info("cmdclassname "+newCmd.getClass().getName());
	        et.commit();
//	        id=new Holder<String>(newCmd.getCmdId());
//	        prix=new Holder<Double>(newCmd.getPrix());
	        id.value=newCmd.getCmdId();
	        prix.value=newCmd.getPrix();
	        
	        LOG.info("cmd  "+id.value+" "+prix);
			//em.close();  
			//return newCmd;
		} catch (DAOException e) {
			//em.close();  
			//return null;
		}
    
    
    
    }

    /* (non-Javadoc)
     * @see fr.univ_lyon1.m2ti.tiw5.wine.service.livraisons.LivraisonPortType#livraisonEffectuee(java.lang.String  parameters )*
     */
    public boolean livraisonEffectuee(java.lang.String parameters) throws CommandeInconnueFault    { 
//        LOG.info("Executing operation livraisonEffectuee");
//        System.out.println(parameters);
//        try {
//            boolean _return = false;
//            return _return;
//        } catch (java.lang.Exception ex) {
//            ex.printStackTrace();
//            throw new RuntimeException(ex);
//        }
//        //throw new CommandeInconnueFault("commandeInconnueFault...");
    	
    	LOG.info(parameters);
        String commandeId=parameters;
    	JPAWineDAO dao = new JPAWineDAO(em);
		EntityTransaction et=em.getTransaction();
		if (!et.isActive()) et.begin();
		try {
			System.out.println("CommandeInfos - livraisonEffectuee - Commande #"
					+commandeId);
			Commande cmd = dao.findCommandeById(Long.valueOf(commandeId).longValue());
			if(cmd.hasEffectuee()){
			    //em.close();
				return false;
			} else {
				cmd.setEffectuee(new Date(System.currentTimeMillis()));
				et.commit();
			    //em.close();
				return true;
			}
		} catch (Exception e) {
		    //em.close();
			throw new CommandeInconnueFault(commandeId);
		}
	}
        
        
        
    

    /* (non-Javadoc)
     * @see fr.univ_lyon1.m2ti.tiw5.wine.service.livraisons.LivraisonPortType#confirmation(java.lang.String  parameters )*
     */
    public javax.xml.datatype.XMLGregorianCalendar confirmation(java.lang.String parameters) throws NonDisponibleFault , CommandeInconnueFault    { 
//        LOG.info("Executing operation confirmation");
//        System.out.println(parameters);
//        try {
//            javax.xml.datatype.XMLGregorianCalendar _return = null;
//            return _return;
//        } catch (java.lang.Exception ex) {
//            ex.printStackTrace();
//            throw new RuntimeException(ex);
//        }
//        //throw new NonDisponibleFault("nonDisponibleFault...");
//        //throw new CommandeInconnueFault("commandeInconnueFault...");
    	String commandeId=parameters;
    	JPAWineDAO dao = new JPAWineDAO(em);
		EntityTransaction et=em.getTransaction();
		if (!et.isActive()) et.begin();
		System.out.println("commandeId   "+commandeId);
		//throw new CommandeInconnueException(commandeId);
		try {
			CommandeArticles ca;
			Wine wine;
			int stockWine;
			int commandeWine;
			ArrayList<ICommandeArticles> articles = 
					new ArrayList<ICommandeArticles>(dao.getAllCommandeArticles());
			HashMap<String, Integer> totaleCommande = new HashMap<String, Integer>();
			for(int i=0;i<articles.size();i++){
				ca = (CommandeArticles)(articles.get(i));
				System.out.println("CommandeInfos - Article dans Commande #"
						+ca.getCommande().getId().longValue()
						+" - Commande cherchée #"
						+Long.parseLong(commandeId));
				if(ca.getCommande().getId().longValue()==Long.parseLong(commandeId)){
					wine = ca.getWine();
					stockWine = ca.getWine().getBottles().size();
					commandeWine = ca.getQuantite();
					System.out.println("CommandeInfos - Article pour Commande #"
							+ca.getCommande().getId().longValue()+" trouvé #" 
							+ca.getId()+" wine #"+wine.getFBId()+":"+stockWine+"disponible(s)");
					if(totaleCommande.containsKey(wine.getFBId())){
						System.out.println("CommandeInfos - wine #"+wine.getFBId()+" déjà existe dans le compteur :"
							+totaleCommande.get(wine.getFBId())+"+"+commandeWine);
						totaleCommande.put(wine.getFBId(), 
								totaleCommande.get(wine.getFBId())+commandeWine);
					} else {
						System.out.println("CommandeInfos - wine #"+wine.getFBId()
							+commandeWine+" bouteille(s) ajoutée(s) dans le compteur");
						totaleCommande.put(wine.getFBId(), commandeWine);
					}
					if( totaleCommande.get(wine.getFBId()) > stockWine ){
						System.out.println("CommandeInfos - wine #"+wine.getFBId()+" : "
							+totaleCommande.get(wine.getFBId())+"commandée(s) mais "
							+stockWine+"disponible(s)");
						//em.close();
						throw new NonDisponibleException(
								new Article(wine.getFBId(),ca.getQuantite()));
					}
				}
			}

		    Iterator<Entry<String, Integer>> itMap = totaleCommande.entrySet().iterator();
		    Iterator<Bottle> itBottle;
		    Integer nbRemove;
		    Entry<String, Integer> elemTemp;
		    while (itMap.hasNext()) {
		    	elemTemp = itMap.next();
		    	wine = dao.findWineById(elemTemp.getKey());
		    	nbRemove = elemTemp.getValue();
				System.out.println("CommandeInfos - Confirmation - Commande confirmée : wine_id="
						+wine.getFBId()+" "+nbRemove+" bouteille(s) prise(s)");
		    	itBottle = wine.getBottles().iterator();
				while (nbRemove>0) {
					dao.deleteBottle(itBottle.next());
					nbRemove--;
				}
		    }
		    
			Commande cmd = dao.findCommandeById(Long.valueOf(commandeId).longValue());
		    Date confirmee = new Date(System.currentTimeMillis()+3*24*60*60*1000);
		    cmd.setConfirmee(confirmee);
		    et.commit();
		    //em.close();

			
			GregorianCalendar c = new GregorianCalendar();
			c.setTime(confirmee);
			XMLGregorianCalendar date2 = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);

		    return date2;
		} catch (Exception e) {
			//em.close();
			//throw e;
			throw new CommandeInconnueFault(commandeId);
		}
    	
    	
    }

}
